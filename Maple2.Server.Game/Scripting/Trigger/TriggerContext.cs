using System.Numerics;

namespace Maple2.Server.Game.Scripting.Trigger;

public interface ITriggerContext {
    // Actions
    public void AddBalloonTalk(int spawnId, string msg, int duration, int delayTick, int npcId);
    public void AddBuff(int[] boxIds, int skillId, int level, bool isPlayer, bool isSkillSet, string feature);
    public void AddCinematicTalk(int npcId, string illustId, string msg, int duration, Align align, int delayTick);
    public void AddEffectNif(int spawnId, string nifPath, bool isOutline, float scale, int rotateZ);
    public void AddUserValue(string key, int value);
    public void AllocateBattlefieldPoints(int boxId, int points);
    public void Announce(int type, string content, bool arg3);
    public void ArcadeBoomBoomOceanClearRound(int round);
    public void ArcadeBoomBoomOceanEndGame();
    public void ArcadeBoomBoomOceanSetSkillScore(int id, int score);
    public void ArcadeBoomBoomOceanStartGame(int lifeCount);
    public void ArcadeBoomBoomOceanStartRound(int round, int roundDuration, int timeScoreRate);
    public void ArcadeSpringFarmClearRound(int round);
    public void ArcadeSpringFarmEndGame();
    public void ArcadeSpringFarmSetInteractScore(int id, int score);
    public void ArcadeSpringFarmSpawnMonster(int[] spawnIds, int score);
    public void ArcadeSpringFarmStartGame(int lifeCount);
    public void ArcadeSpringFarmStartRound(int uiDuration, int round, string timeScoreType, int timeScoreRate, int roundDuration);
    public void ArcadeThreeTwoOneClearRound(int round);
    public void ArcadeThreeTwoOneEndGame();
    public void ArcadeThreeTwoOneResultRound(int resultDirection);
    public void ArcadeThreeTwoOneResultRound2(int round);
    public void ArcadeThreeTwoOneStartGame(int lifeCount, int initScore);
    public void ArcadeThreeTwoOneStartRound(int uiDuration, int round);
    public void ArcadeThreeTwoOne2ClearRound(int round);
    public void ArcadeThreeTwoOne2EndGame();
    public void ArcadeThreeTwoOne2ResultRound(int resultDirection);
    public void ArcadeThreeTwoOne2ResultRound2(int round);
    public void ArcadeThreeTwoOne2StartGame(int lifeCount, int initScore);
    public void ArcadeThreeTwoOne2StartRound(int uiDuration, int round);
    public void ArcadeThreeTwoOne3ClearRound(int round);
    public void ArcadeThreeTwoOne3EndGame();
    public void ArcadeThreeTwoOne3ResultRound(int resultDirection);
    public void ArcadeThreeTwoOne3ResultRound2(int round);
    public void ArcadeThreeTwoOne3StartGame(int lifeCount, int initScore);
    public void ArcadeThreeTwoOne3StartRound(int uiDuration, int round);
    public void ChangeBackground(string dds);
    public void ChangeMonster(int fromSpawnId, int toSpawnId);
    public void CloseCinematic();
    public void CreateFieldGame(FieldGame type, bool reset);
    public void CreateItem(int[] spawnIds, int triggerId, int itemId, int arg5);
    public void CreateWidget(string type);
    public void DarkStreamClearRound(int round);
    public void DarkStreamSpawnMonster(int[] spawnIds, int score);
    public void DarkStreamStartGame(int round);
    public void DarkStreamStartRound(int round, int uiDuration, int damagePenalty);
    public void DebugString(string value, string feature);
    public void DestroyMonster(int[] spawnIds, bool arg2);
    public void DungeonClear(string uiType);
    public void DungeonClearRound(int round);
    public void DungeonCloseTimer();
    public void DungeonDisableRanking();
    public void DungeonEnableGiveUp(bool isEnable);
    public void DungeonFail();
    public void DungeonMissionComplete(string feature, int missionId);
    public void DungeonMoveLapTimeToNow(int id);
    public void DungeonResetTime(int seconds);
    public void DungeonSetEndTime();
    public void DungeonSetLapTime(int id, int lapTime);
    public void DungeonStopTimer();
    public void SetDungeonVariable(int varId, int value);
    public void EnableLocalCamera(bool isEnable);
    public void EnableSpawnPointPc(int spawnId, bool isEnable);
    public void EndMiniGame(int winnerBoxId, string gameName, bool isOnlyWinner);
    public void EndMiniGameRound(int winnerBoxId, float expRate, float meso, bool isOnlyWinner, bool isGainLoserBonus, string gameName);
    public void FaceEmotion(int spawnId, string emotionName);
    public void FieldGameConstant(string key, string value, string feature, Locale locale);
    public void FieldGameMessage(int custom, string type, bool arg1, string script, int duration);
    public void FieldWarEnd(bool isClear);
    public void GiveExp(int boxId, float rate, bool arg3);
    public void GiveGuildExp(int boxId, int type);
    public void GiveRewardContent(int rewardId);
    public void GuideEvent(int eventId);
    public void GuildVsGameEndGame();
    public void GuildVsGameGiveContribution(int teamId, bool isWin, string desc);
    public void GuildVsGameGiveReward(string type, int teamId, bool isWin, string desc);
    public void GuildVsGameLogResult(string desc);
    public void GuildVsGameLogWonByDefault(int teamId, string desc);
    public void GuildVsGameResult(string desc);
    public void GuildVsGameScoreByUser(int boxId, int score, string desc);
    public void HideGuideSummary(int entityId, int textId);
    public void InitNpcRotation(int[] spawnIds);
    public void KickMusicAudience(int boxId, int portalId);
    public void LimitSpawnNpcCount(int limitCount, string desc);
    public void LockMyPc(bool isLock);
    public void MiniGameCameraDirection(int boxId, int cameraId);
    public void MiniGameGiveExp(int boxId, float expRate, bool isOutside);
    public void MiniGameGiveReward(int winnerBoxId, string contentType, string gameName);
    public void MoveNpc(int spawnId, string patrolName);
    public void MoveNpcToPos(int spawnId, Vector3 pos, Vector3 rot);
    public void MoveRandomUser(int mapId, int portalId, int boxId, int count);
    public void MoveToPortal(int userTagId, int portalId, int boxId);
    public void MoveUser(int mapId, int portalId, int boxId);
    public void MoveUserPath(string patrolName);
    public void MoveUserToBox(int boxId, int portalId);
    public void MoveUserToPos(Vector3 pos, Vector3 rot);
    public void Notice(int type, string script, bool arg3);
    public void NpcRemoveAdditionalEffect(int spawnId, int additionalEffectId);
    public void NpcToPatrolInBox(int boxId, int npcId, string spawnId, string patrolName);
    public void PatrolConditionUser(string patrolName, int patrolIndex, int additionalEffectId);
    public void PlaySceneMovie(string fileName, int movieId, string skipType);
    public void PlaySystemSoundByUserTag(int userTagId, string soundKey);
    public void PlaySystemSoundInBox(string sound, int[] boxIds);
    public void RandomAdditionalEffect(string target, int boxId, int spawnId, int targetCount, int tick, int waitTick, string targetEffect, int additionalEffectId);
    public void RemoveBalloonTalk(int spawnId);
    public void RemoveBuff(int boxId, int skillId, bool isPlayer);
    public void RemoveCinematicTalk();
    public void RemoveEffectNif(int spawnId);
    public void ResetCamera(float interpolationTime);
    public void ResetTimer(string timerId);
    public void RoomExpire();
    public void ScoreBoardCreate(string type, string title, int maxScore);
    public void ScoreBoardRemove();
    public void ScoreBoardSetScore(int score);
    public void SelectCamera(int triggerId, bool enable);
    public void SelectCameraPath(int[] pathIds, bool returnView);
    public void SetAchievement(int triggerId, string type, string achieve);
    public void SetActor(int triggerId, bool visible, string initialSequence, bool arg4, bool arg5);
    public void SetAgent(int[] triggerIds, bool visible);
    public void SetAiExtraData(string key, int value, bool isModify, int boxId);
    public void SetAmbientLight(Vector3 primary, Vector3 secondary, Vector3 tertiary);
    public void SetBreakable(int[] triggerIds, bool enable);
    public void SetCinematicIntro(string text);
    public void SetCinematicUi(int type, string script, bool arg3);
    public void SetCube(int[] triggerIds, bool isVisible, int randomCount);
    public void SetDialogue(int type, int spawnId, string script, int time, int arg5, Align align);
    public void SetDirectionalLight(Vector3 diffuseColor, Vector3 specularColor);
    public void SetEffect(int[] triggerIds, bool visible, int startDelay, int interval);
    public void SetEventUi(int type, string arg2, string arg3, string arg4);
    public void SetGravity(float gravity);
    public void SetInteractObject(int[] triggerIds, int state, bool arg4, bool arg3);
    public void SetLadder(int[] triggerIds, bool visible, bool enable, int fade);
    public void SetLocalCamera(int cameraId, bool enable);
    public void SetMesh(int[] triggerIds, bool visible, int startDelay, int interval, float fade, string desc);
    public void SetMeshAnimation(int[] triggerIds, bool visible, int startDelay, int interval);
    public void SetMiniGameAreaForHack(int boxId);
    public void SetNpcDuelHpBar(bool isOpen, int spawnId, int durationTick, int npcHpStep);
    public void SetNpcEmotionLoop(int spawnId, string sequenceName, float duration);
    public void SetNpcEmotionSequence(int spawnId, string sequenceName, int durationTick);
    public void SetNpcRotation(int spawnId, float rotation);
    public void SetOnetimeEffect(int id, bool enable, string path);
    public void SetPcEmotionLoop(string sequenceName, float duration, bool arg3);
    public void SetPcEmotionSequence(string[] sequenceNames);
    public void SetPcRotation(Vector3 rotation);
    public void SetPhotoStudio(bool isEnable);
    public void SetPortal(int portalId, bool visible, bool enable, bool minimapVisible, bool arg5);
    public void SetPvpZone(int boxId, int prepareTime, int matchTime, int additionalEffectId, int type, int[] boxIds);
    public void SetQuestAccept(int questId);
    public void SetQuestComplete(int questId);
    public void SetRandomMesh(int[] triggerIds, bool visible, int startDelay, int interval, int fade);
    public void SetRope(int triggerId, bool visible, bool enable, int fade);
    public void SetSceneSkip(dynamic state, string action);
    public void SetSkill(int[] triggerIds, bool enable);
    public void SetSkip(dynamic state);
    public void SetSound(int triggerId, bool enable);
    public void SetState(int id, dynamic[] states, bool randomize);
    public void SetTimeScale(bool enable, float startScale, float endScale, float duration, int interpolator);
    public void SetTimer(string timerId, int seconds, int startDelay, int interval, int vOffset, string type, string desc);
    public void SetUserValue(int triggerId, string key, int value);
    public void SetUserValueFromDungeonRewardCount(string key, int dungeonRewardId);
    public void SetUserValueFromGuildVsGameScore(int teamId, string key);
    public void SetUserValueFromUserCount(int triggerBoxId, string key, int userTagId);
    public void SetVisibleBreakableObject(int[] triggerIds, bool visible);
    public void SetVisibleUi(string[] uiNames, bool visible);
    public void ShadowExpeditionCloseBossGauge();
    public void ShadowExpeditionOpenBossGauge(int maxGaugePoint, string title);
    public void ShowCaption(string type, string title, string desc, Align align, float offsetRateX, float offsetRateY, int duration, float scale);
    public void ShowCountUi(string text, int stage, int count, int soundType);
    public void ShowEventResult(string type, string text, int duration, int userTagId, int triggerBoxId, bool isOutside);
    public void ShowGuideSummary(int entityId, int textId, int duration);
    public void ShowRoundUi(int round, int duration, bool isFinalRound);
    public void SideNpcCutin(string illust, int duration);
    public void SideNpcMovie(string usm, int duration);
    public void SideNpcTalk(int npcId, string illust, int duration, string script, string voice);
    public void SideNpcTalkBottom(int npcId, string illust, int duration, string script);
    public void SightRange(bool enable, int range, int rangeZ, int border);
    public void SpawnItemRange(int[] rangeIds, int randomPickCount);
    public void SpawnMonster(int[] spawnIds, bool autoTarget, int delay);
    public void SpawnNpcRange(int[] rangeIds, bool isAutoTargeting, int randomPickCount, int score);
    public void StartCombineSpawn(int[] groupId, bool isStart);
    public void StartMiniGame(int boxId, int round, string gameName, bool isShowResultUi);
    public void StartMiniGameRound(int boxId, int round);
    public void StartTutorial();
    public void TalkNpc(int spawnId);
    public void UnsetMiniGameAreaForHack();
    public void UseState(int id, bool randomize);
    public void UserTagSymbol(string symbol1, string symbol2);
    public void UserValueToNumberMesh(string key, int startMeshId, int digitCount);
    public void VisibleMyPc(bool isVisible);
    public void Weather(Weather weatherType);
    public void WeddingBroken();
    public void WeddingMoveUser(string entryType, int mapId, int[] portalIds, int boxId);
    public void WeddingMutualAgree(string agreeType);
    public void WeddingMutualCancel(string agreeType);
    public void WeddingSetUserEmotion(string entryType, int id);
    public void WeddingSetUserLookAt(string entryType, string lookAtEntryType, bool immediate);
    public void WeddingSetUserRotation(string entryType, Vector3 rotation, bool immediate);
    public void WeddingUserToPatrol(string patrolName, string entryType, int patrolIndex);
    public void WeddingVowComplete();
    public void WidgetAction(string type, string func, string widgetArg, string desc, int widgetArgNum);
    public void WriteLog(string logName, string @event, int triggerId, string subEvent, int level);

    // Conditions
    public int BonusGameReward(int boxId);
    public bool CheckAnyUserAdditionalEffect(int boxId, int additionalEffectId, int level);
    public bool CheckDungeonLobbyUserCount();
    public bool CheckNpcAdditionalEffect(int spawnId, int additionalEffectId, int level);
    public float NpcDamage(int spawnId);
    public int NpcExtraData(int spawnPointId, string extraDataKey);
    public int NpcHp(int spawnId, bool isRelative);
    public bool CheckSameUserTag(int boxId);
    public bool CheckUser();
    public int UserCount();
    public int CountUsers(int boxId, int userTagId);
    public int DayOfWeek(string desc);
    public bool DetectLiftableObject(int[] boxIds, int itemId);
    public int DungeonPlayTime();
    public string DungeonState();
    public int DungeonFirstUserMissionScore();
    public int DungeonId();
    public int DungeonLevel();
    public int DungeonMaxUserCount();
    public int DungeonRound();
    public bool DungeonTimeout();
    public int DungeonVariable(int varId);
    public bool GuildVsGameScoredTeam(int teamId);
    public bool GuildVsGameWinnerTeam(int teamId);
    public bool IsDungeonRoom();
    public bool IsPlayingMapleSurvival();
    public bool MonsterDead(int[] spawnIds, bool autoTarget);
    public bool MonsterInCombat(int[] spawnIds);
    public bool NpcDetected(int boxId, int[] spawnIds);
    public bool NpcIsDeadByStringId(string stringId);
    public bool ObjectInteracted(int[] interactIds, int state);
    public bool PvpZoneEnded(int boxId);
    public bool QuestUserDetected(int[] boxIds, int[] questIds, int[] questStates, int jobCode);
    public bool RandomCondition(float weight, string desc);
    public int ScoreBoardScore();
    public int ShadowExpeditionPoints();
    public bool TimeExpired(string timerId);
    public bool UserDetected(int[] boxIds, int jobCode);
    public int UserValue(string key);
    public bool WaitAndResetTick(int waitTick);
    public bool WaitSecondsUserValue(string key, string desc);
    public bool WaitTick(int waitTick);
    public bool WeddingEntryInField(string entryType, bool isInField);
    public string WeddingHallState(bool success);
    public bool WeddingMutualAgreeResult(string agreeType);
    public int WidgetValue(string type, string name, string desc);
}
