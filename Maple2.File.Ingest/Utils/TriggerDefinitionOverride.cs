using System.Diagnostics;
using static Maple2.File.Ingest.Utils.ScriptType;

namespace Maple2.File.Ingest.Utils;

internal static class TriggerDefinitionOverride {
    public static readonly Dictionary<string, Dictionary<string, (ScriptType, string?)>> ActionTypeOverride = new();
    public static readonly Dictionary<string, Dictionary<string, string>> ActionNameOverride = new();
    public static readonly Dictionary<string, Dictionary<string, (ScriptType, string?)>> ConditionTypeOverride = new();
    public static readonly Dictionary<string, Dictionary<string, string>> ConditionNameOverride = new();

    static TriggerDefinitionOverride() {
        // Action Override
        AddActionNameOverride("add_balloon_talk", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("add_balloon_talk", ("spawnId", Int, null), ("duration", Int, null), ("delayTick", Int, null), ("npcID", Int, null));
        AddActionNameOverride("add_buff", ("arg1", "boxIds"), ("arg2", "skillId"), ("arg3", "level"), ("arg4", "isPlayer"), ("arg5", "isSkillSet"));
        AddActionTypeOverride("add_buff", ("boxIds", IntList, null), ("skillId", Int, null), ("level", Int, null), ("isPlayer", Bool, "True"), ("isSkillSet", Bool, "True"));
        AddActionNameOverride("add_cinematic_talk", ("npcID", "npcId"), ("illustID", "illustId"), ("delay", "delayTick"));
        AddActionTypeOverride("add_cinematic_talk", ("npcId", Int, null), ("duration", Int, null), ("delayTick", Int, null));
        AddActionNameOverride("add_effect_nif", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("add_effect_nif", ("spawnId", Int, null), ("isOutline", Bool, null), ("scale", Float, null), ("rotateZ", Int, null));
        // AddActionNameOverride("add_user_value");
        AddActionTypeOverride("add_user_value", ("value", Int, null));
        // AddActionNameOverride("arcade_boom_boom_ocean");
        AddActionTypeOverride("arcade_boom_boom_ocean", ("lifeCount", Int, null), ("id", Int, null), ("score", Int, null), ("round", Int, null), ("roundDuration", Int, null), ("timeScoreRate", Int, null));
        AddActionNameOverride("arcade_spring_farm", ("spawnID", "spawnIds"));
        AddActionTypeOverride("arcade_spring_farm", ("lifeCount", Int, null), ("id", Int, null), ("score", Int, null), ("spawnIds", IntList, null), ("uiDuration", Int, null), ("round", Int, null));
        // AddActionNameOverride("arcade_three_two_one");
        AddActionTypeOverride("arcade_three_two_one", ("lifeCount", Int, null), ("initScore", Int, null), ("uiDuration", Int, null), ("round", Int, null), ("resultDirection", Int, null));
        // AddActionNameOverride("arcade_three_two_one2");
        AddActionTypeOverride("arcade_three_two_one2", ("lifeCount", Int, null), ("initScore", Int, null), ("uiDuration", Int, null), ("round", Int, null), ("resultDirection", Int, null));
        // AddActionNameOverride("arcade_three_two_one3");
        AddActionTypeOverride("arcade_three_two_one3", ("lifeCount", Int, null), ("initScore", Int, null), ("uiDuration", Int, null), ("round", Int, null), ("resultDirection", Int, null));
        // AddActionNameOverride("change_background");
        // AddActionTypeOverride("change_background");
        AddActionNameOverride("change_monster", ("arg1", "removeSpawnId"), ("arg2", "addSpawnId"));
        AddActionTypeOverride("change_monster", ("removeSpawnId", Int, null), ("addSpawnId", Int, null));
        // AddActionNameOverride("close_cinematic");
        // AddActionTypeOverride("close_cinematic");
        // AddActionNameOverride("create_field_game");
        AddActionTypeOverride("create_field_game", ("reset", Bool, null));
        AddActionNameOverride("create_item", ("arg1", "spawnIds"), ("arg2", "triggerId"), ("arg3", "itemId"));
        AddActionTypeOverride("create_item", ("spawnIds", IntList, null), ("triggerId", Int, null), ("itemId", Int, null), ("arg5", Int, null));
        AddActionNameOverride("create_monster", ("arg1", "spawnIds"), ("arg2", "animationEffect"), ("agr2", "animationEffect"), ("arg3", "animationDelay"));
        AddActionTypeOverride("create_monster", ("spawnIds", IntList, null), ("animationEffect", Bool, "True"), ("animationDelay", Int, null), ("arg", None, null));
        AddActionNameOverride("create_widget", ("arg1", "type"));
        // AddActionTypeOverride("create_widget");
        AddActionNameOverride("dark_stream", ("spawnID", "spawnIds"));
        AddActionTypeOverride("dark_stream", ("round", Int, null), ("uiDuration", Int, null), ("damagePenalty", Int, null), ("spawnIds", IntList, null), ("score", Int, null));
        AddActionNameOverride("debug_string", ("arg1", "value"));
        // AddActionTypeOverride("debug_string");
        AddActionNameOverride("destroy_monster", ("arg1", "spawnIds"), ("agr2", "arg2"));
        AddActionTypeOverride("destroy_monster", ("spawnIds", IntList, null), ("arg2", Bool, "True"));
        // AddActionNameOverride("dungeon_clear");
        AddActionTypeOverride("dungeon_clear", ("uiType", Str, "None"));
        // AddActionNameOverride("dungeon_clear_round");
        AddActionTypeOverride("dungeon_clear_round", ("round", Int, null));
        // AddActionNameOverride("dungeon_close_timer");
        // AddActionTypeOverride("dungeon_close_timer");
        // AddActionNameOverride("dungeon_disable_ranking");
        // AddActionTypeOverride("dungeon_disable_ranking");
        // AddActionNameOverride("dungeon_enable_give_up");
        AddActionTypeOverride("dungeon_enable_give_up", ("enable", Bool, null));
        // AddActionNameOverride("dungeon_fail");
        // AddActionTypeOverride("dungeon_fail");
        AddActionNameOverride("dungeon_mission_complete", ("missionID", "missionId"));
        AddActionTypeOverride("dungeon_mission_complete", ("missionId", Int, null));
        // AddActionNameOverride("dungeon_move_lap_time_to_now");
        AddActionTypeOverride("dungeon_move_lap_time_to_now", ("id", Int, null));
        // AddActionNameOverride("dungeon_reset_time");
        AddActionTypeOverride("dungeon_reset_time", ("seconds", Int, null));
        // AddActionNameOverride("dungeon_set_end_time");
        // AddActionTypeOverride("dungeon_set_end_time");
        // AddActionNameOverride("dungeon_set_lap_time");
        AddActionTypeOverride("dungeon_set_lap_time", ("id", Int, null), ("lapTime", Int, null));
        // AddActionNameOverride("dungeon_stop_timer");
        // AddActionTypeOverride("dungeon_stop_timer");
        AddActionNameOverride("dungeon_variable", ("varID", "varId"));
        AddActionTypeOverride("dungeon_variable", ("varId", Int, null), ("value", Int, null));
        // AddActionNameOverride("enable_local_camera");
        AddActionTypeOverride("enable_local_camera", ("isEnable", Bool, null));
        AddActionNameOverride("enable_spawn_point_pc", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("enable_spawn_point_pc", ("spawnId", Int, null), ("isEnable", Bool, null));
        // AddActionNameOverride("end_mini_game");
        AddActionTypeOverride("end_mini_game", ("winnerBoxId", Int, null), ("isEnable", Bool, null));
        // AddActionNameOverride("end_mini_game_round");
        AddActionTypeOverride("end_mini_game_round", ("winnerBoxId", Int, null), ("expRate", Float, null), ("meso", Float, null), ("isOnlyWinner", Bool, null), ("isGainLoserBonus", Bool, null));
        AddActionNameOverride("face_emotion", ("spawnPointID", "spawnId"), ("spwnPointID", "spawnId"));
        AddActionTypeOverride("face_emotion", ("spawnId", Int, null));
        // AddActionNameOverride("field_game_constant");
        // AddActionTypeOverride("field_game_constant");
        AddActionNameOverride("field_game_message", ("arg2", "script"), ("arg3", "duration"));
        AddActionTypeOverride("field_game_message", ("custom", Int, null), ("arg1", None, null), ("duration", Int, null)); // arg1 always True
        // AddActionNameOverride("field_war_end");
        AddActionTypeOverride("field_war_end", ("isClear", Bool, null));
        AddActionNameOverride("give_exp", ("arg1", "boxId"), ("arg2", "amount"));
        AddActionTypeOverride("give_exp", ("boxId", Int, null), ("amount", Int, null)); // testtrigger only
        AddActionNameOverride("give_guild_exp", ("boxID", "boxId"));
        AddActionTypeOverride("give_guild_exp", ("boxId", Int, null), ("type", Int, null));
        AddActionNameOverride("give_reward_content", ("rewardID", "rewardId"));
        AddActionTypeOverride("give_reward_content", ("rewardId", Int, null));
        AddActionNameOverride("guide_event", ("eventID", "eventId"));
        AddActionTypeOverride("guide_event", ("eventId", Int, null));
        // AddActionNameOverride("guild_vs_game_end_game");
        // AddActionTypeOverride("guild_vs_game_end_game");
        AddActionNameOverride("guild_vs_game_give_contribution", ("teamID", "teamId"));
        AddActionTypeOverride("guild_vs_game_give_contribution", ("teamId", Int, null), ("isWin", Bool, null));
        AddActionNameOverride("guild_vs_game_give_reward", ("teamID", "teamId"));
        AddActionTypeOverride("guild_vs_game_give_reward", ("teamId", Int, null), ("isWin", Bool, null));
        // AddActionTypeOverride("guild_vs_game_log_result");
        // AddActionNameOverride("guild_vs_game_log_result");
        AddActionNameOverride("guild_vs_game_log_won_by_default", ("teamID", "teamId"));
        AddActionTypeOverride("guild_vs_game_log_won_by_default", ("teamId", Int, null));
        // AddActionNameOverride("guild_vs_game_result");
        // AddActionTypeOverride("guild_vs_game_result");
        AddActionNameOverride("guild_vs_game_score_by_user", ("triggerBoxID", "boxId"));
        AddActionTypeOverride("guild_vs_game_score_by_user", ("boxId", Int, null), ("score", Int, null));
        AddActionNameOverride("hide_guide_summary", ("entityID", "entityId"), ("textID", "textId"));
        AddActionTypeOverride("hide_guide_summary", ("entityId", Int, null), ("textId", Int, null));
        AddActionNameOverride("init_npc_rotation", ("arg1", "spawnIds"));
        AddActionTypeOverride("init_npc_rotation", ("spawnIds", IntList, null));
        AddActionNameOverride("kick_music_audience", ("targetBoxID", "boxId"), ("targetPortalID", "portalId"));
        AddActionTypeOverride("kick_music_audience", ("boxId", Int, null), ("portalId", Int, null));
        // AddActionNameOverride("limit_spawn_npc_count");
        AddActionTypeOverride("limit_spawn_npc_count", ("limitCount", Int, null));
        // AddActionNameOverride("lock_my_pc");
        AddActionTypeOverride("lock_my_pc", ("isLock", Bool, null));
        // AddActionNameOverride("mini_game_camera_direction");
        AddActionTypeOverride("mini_game_camera_direction", ("boxId", Int, null), ("cameraId", Int, null));
        AddActionNameOverride("mini_game_give_exp", ("isOutSide", "isOutside"));
        AddActionTypeOverride("mini_game_give_exp", ("boxId", Int, null), ("expRate", Float, "1.0"), ("isOutside", Bool, null));
        // AddActionNameOverride("mini_game_give_reward");
        AddActionTypeOverride("mini_game_give_reward", ("winnerBoxId", Int, null));
        AddActionNameOverride("move_npc", ("arg1", "spawnId"), ("arg2", "patrolName"));
        AddActionTypeOverride("move_npc", ("spawnId", Int, null));
        AddActionNameOverride("move_npc_to_pos", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("move_npc_to_pos", ("spawnId", Int, null), ("pos", Vector3, null), ("rot", Vector3, null));
        AddActionNameOverride("move_random_user", ("arg1", "mapId"), ("arg2", "portalId"), ("arg3", "triggerId"), ("arg4", "count"));
        AddActionTypeOverride("move_random_user", ("mapId", Int, null), ("portalId", Int, null), ("triggerId", Int, null), ("count", Int, null));
        // AddActionNameOverride("move_to_portal");
        AddActionTypeOverride("move_to_portal", ("userTagId", Int, null), ("portalId", Int, null), ("boxId", Int, null));
        AddActionNameOverride("move_user", ("arg1", "mapId"), ("arg2", "portalId"), ("arg3", "boxId"));
        AddActionTypeOverride("move_user", ("mapId", Int, null), ("portalId", Int, null), ("boxId", Int, null));
        AddActionNameOverride("move_user_path", ("arg1", "patrolName"));
        // AddActionTypeOverride("move_user_path");
        // AddActionNameOverride("move_user_to_box");
        AddActionTypeOverride("move_user_to_box", ("boxId", Int, null), ("portalId", Int, null));
        // AddActionNameOverride("move_user_to_pos");
        AddActionTypeOverride("move_user_to_pos", ("pos", Vector3, null), ("rot", Vector3, null));
        AddActionNameOverride("notice", ("arg2", "script"));
        AddActionTypeOverride("notice", ("arg1", Bool, null), ("arg3", Bool, null));
        AddActionNameOverride("npc_remove_additional_effect", ("spawnPointID", "spawnId"), ("additionalEffectID", "additionalEffectId"));
        AddActionTypeOverride("npc_remove_additional_effect", ("spawnId", Int, null), ("additionalEffectId", Int, null));
        // AddActionNameOverride("npc_to_patrol_in_box");
        AddActionTypeOverride("npc_to_patrol_in_box", ("boxId", Int, null), ("npcId", Int, null)); // Note: spawnId='interactObject'
        AddActionNameOverride("patrol_condition_user", ("additionalEffectID", "additionalEffectId"));
        AddActionTypeOverride("patrol_condition_user", ("patrolIndex", Int, null), ("additionalEffectId", Int, null));
        AddActionNameOverride("play_scene_movie", ("movieID", "movieId"));
        AddActionTypeOverride("play_scene_movie", ("movieId", Int, null));
        AddActionNameOverride("play_system_sound_by_user_tag", ("userTagID", "userTagId"));
        AddActionTypeOverride("play_system_sound_by_user_tag", ("userTagId", Int, null));
        AddActionNameOverride("play_system_sound_in_box", ("arg1", "boxIds"), ("arg2", "sound"));
        AddActionTypeOverride("play_system_sound_in_box", ("boxIds", IntList, null));
        AddActionNameOverride("random_additional_effect", ("Target", "target"), ("triggerBoxID", "boxId"), ("spawnPointID", "spawnId"), ("arg1", "boxIds"), ("additionalEffectID", "additionalEffectId"));
        AddActionTypeOverride("random_additional_effect", ("boxId", Int, null), ("spawnId", Int, null), ("targetCount", Int, null), ("tick", Int, null), ("waitTick", Int, null), ("additionalEffectId", Int, null));
        AddActionNameOverride("remove_balloon_talk", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("remove_balloon_talk", ("spawnId", Int, null));
        AddActionNameOverride("remove_buff", ("arg1", "boxId"), ("arg2", "skillId"), ("arg3", "isPlayer"));
        AddActionTypeOverride("remove_buff", ("boxId", Int, null), ("skillId", Int, null), ("isPlayer", Bool, null));
        // AddActionNameOverride("remove_cinematic_talk");
        // AddActionTypeOverride("remove_cinematic_talk");
        AddActionNameOverride("remove_effect_nif", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("remove_effect_nif", ("spawnId", Int, null));
        AddActionNameOverride("reset_camera", ("arg2", "interpolationTime"));
        AddActionTypeOverride("reset_camera", ("interpolationTime", Float, null), ("arg1", None, null));
        AddActionNameOverride("reset_timer", ("arg1", "timerId"));
        // AddActionTypeOverride("reset_timer");
        // AddActionNameOverride("room_expire");
        // AddActionTypeOverride("room_expire");
        AddActionNameOverride("score_board_create");
        AddActionTypeOverride("score_board_create", ("maxScore", Int, null));
        // AddActionNameOverride("score_board_remove");
        // AddActionTypeOverride("score_board_remove");
        // AddActionNameOverride("score_board_set_score");
        AddActionTypeOverride("score_board_set_score", ("score", Int, null));
        AddActionNameOverride("select_camera", ("arg1", "triggerId"), ("arg2", "enable"));
        AddActionTypeOverride("select_camera", ("triggerId", Int, null), ("enable", Bool, "True"));
        AddActionNameOverride("select_camera_path", ("arg1", "pathIds"), ("arg2", "returnView"));
        AddActionTypeOverride("select_camera_path", ("pathIds", IntList, null), ("returnView", Bool, "True"));
        AddActionNameOverride("set_achievement", ("arg1", "triggerId"), ("arg2", "type"), ("arg3", "achieve"));
        AddActionTypeOverride("set_achievement", ("triggerId", Int, null));
        AddActionNameOverride("set_actor", ("arg1", "triggerId"), ("arg2", "visible"), ("arg3", "initialSequence"));
        AddActionTypeOverride("set_actor", ("triggerId", Int, null), ("visible", Bool, null), ("arg4", Bool, null), ("arg5", Bool, null));
        AddActionNameOverride("set_agent", ("arg1", "triggerIds"), ("arg2", "visible"));
        AddActionTypeOverride("set_agent", ("triggerIds", IntList, null), ("visible", Bool, null));
        AddActionNameOverride("set_ai_extra_data", ("boxID", "boxId"));
        AddActionTypeOverride("set_ai_extra_data", ("value", Int, null), ("isModify", Bool, null), ("boxId", Int, null));
        AddActionNameOverride("set_ambient_light", ("arg1", "primary"), ("arg2", "secondary"), ("arg3", "tertiary"));
        AddActionTypeOverride("set_ambient_light", ("primary", Vector3, null), ("secondary", Vector3, null), ("tertiary", Vector3, null));
        AddActionNameOverride("set_breakable", ("arg1", "triggerIds"), ("arg2", "enable"));
        AddActionTypeOverride("set_breakable", ("triggerIds", IntList, null), ("enable", Bool, null));
        // AddActionNameOverride("set_cinematic_intro");
        // AddActionTypeOverride("set_cinematic_intro");
        AddActionNameOverride("set_cinematic_ui", ("arg1", "type"), ("arg2", "script"));
        AddActionTypeOverride("set_cinematic_ui", ("type", Int, null), ("arg3", Bool, null));
        AddActionNameOverride("set_conversation", ("arg1", "type"), ("arg2", "spawnId"), ("arg3", "script"));
        AddActionTypeOverride("set_conversation", ("type", Int, null), ("spawnId", Int, null), ("arg4", Int, null), ("arg5", Int, null));
        AddActionNameOverride("set_cube", ("IDs", "triggerIds"), ("arg1", "triggerIds"), ("arg2", "isVisible"));
        AddActionTypeOverride("set_cube", ("triggerIds", IntList, null), ("isVisible", Bool, null), ("randomCount", Int, null));
        AddActionNameOverride("set_directional_light", ("arg1", "diffuseColor"), ("arg2", "specularColor"));
        AddActionTypeOverride("set_directional_light", ("diffuseColor", Vector3, null), ("specularColor", Vector3, null));
        AddActionNameOverride("set_effect", ("arg1", "triggerIds"), ("arg2", "visible"));
        AddActionTypeOverride("set_effect", ("triggerIds", IntList, null), ("visible", Bool, null), ("arg3", Int, null), ("arg4", Int, null));
        AddActionNameOverride("set_event_ui", ("arg1", "type"));//), ("arg2", "script"), ("arg3", "duration"), ("arg4", "boxIds"));
        AddActionTypeOverride("set_event_ui", ("type", Int, null));//, ("duration", Int, null), ("boxIds", Str, null)); // Note: boxIds has formats: {1,2,3|1-3,!1}
        // AddActionNameOverride("set_gravity");
        AddActionTypeOverride("set_gravity", ("gravity", Float, null));
        AddActionNameOverride("set_interact_object", ("arg1", "triggerIds"), ("arg2", "state"));
        AddActionTypeOverride("set_interact_object", ("triggerIds", IntList, null), ("state", Int, null), ("arg4", Bool, null), ("arg3", Bool, null));
        AddActionNameOverride("set_ladder", ("arg1", "triggerIds"), ("arg2", "visible"), ("arg3", "animationEffect"), ("arg4", "animationDelay"));
        AddActionTypeOverride("set_ladder", ("triggerIds", IntList, null), ("visible", Bool, null), ("animationEffect", Bool, null), ("animationDelay", Int, null));
        // AddActionNameOverride("set_local_camera");
        AddActionTypeOverride("set_local_camera", ("cameraId", Int, null), ("enable", Bool, null));
        AddActionNameOverride("set_mesh", ("arg1", "triggerIds"), ("arg2", "visible"), ("arg4", "delay"), ("arg5", "scale"));
        AddActionTypeOverride("set_mesh", ("triggerIds", IntList, null), ("visible", Bool, null), ("arg3", Int, null), ("delay", Int, null), ("scale", Float, null));
        AddActionNameOverride("set_mesh_animation", ("arg1", "triggerIds"), ("arg2", "visible"));
        AddActionTypeOverride("set_mesh_animation", ("triggerIds", IntList, null), ("visible", Bool, null), ("arg3", Int, null), ("arg4", Int, null));
        AddActionNameOverride("set_mini_game_area_for_hack", ("boxID", "boxId"));
        AddActionTypeOverride("set_mini_game_area_for_hack", ("boxId", Int, null));
        AddActionNameOverride("set_npc_duel_hp_bar", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("set_npc_duel_hp_bar", ("isOpen", Bool, null), ("spawnId", IntList, null), ("durationTick", Int, null), ("npcHpStep", Int, null));
        AddActionNameOverride("set_npc_emotion_loop", ("arg1", "spawnId"), ("arg2", "sequenceName"), ("arg3", "duration"));
        AddActionTypeOverride("set_npc_emotion_loop", ("spawnId", Int, null), ("duration", Float, null));
        AddActionNameOverride("set_npc_emotion_sequence", ("arg1", "spawnId"), ("arg2", "sequenceName"), ("arg3", "durationTick"));
        AddActionTypeOverride("set_npc_emotion_sequence", ("spawnId", Int, null), ("durationTick", Int, null));
        AddActionNameOverride("set_npc_rotation", ("arg1", "spawnId"), ("arg2", "rotation"));
        AddActionTypeOverride("set_npc_rotation", ("spawnId", Int, null), ("rotation", Float, null));
        // AddActionNameOverride("set_onetime_effect");
        AddActionTypeOverride("set_onetime_effect", ("id", Int, null), ("enable", Bool, null));
        AddActionNameOverride("set_pc_emotion_loop", ("arg1", "sequenceName"), ("arg2", "duration"));
        AddActionTypeOverride("set_pc_emotion_loop", ("duration", Float, null), ("arg3", Bool, null));
        AddActionNameOverride("set_pc_emotion_sequence", ("arg1", "sequenceNames"));
        AddActionTypeOverride("set_pc_emotion_sequence", ("sequenceNames", StrList, null));
        // AddActionNameOverride("set_pc_rotation");
        AddActionTypeOverride("set_pc_rotation", ("rotation", Vector3, null));
        // AddActionNameOverride("set_photo_studio");
        AddActionTypeOverride("set_photo_studio", ("isEnable", Bool, null));
        AddActionNameOverride("set_portal", ("arg1", "portalId"), ("arg2", "visible"), ("arg3", "enable"), ("arg4", "minimapVisible"), ("arg", "minimapVisible"));
        AddActionTypeOverride("set_portal", ("portalId", Int, null), ("visible", Bool, null), ("enable", Bool, null), ("minimapVisible", Bool, null), ("arg5", Bool, null));
        AddActionNameOverride("set_pvp_zone", ("arg1", "boxId"), ("arg3", "duration"), ("arg4", "additionalEffectId"), ("arg6", "boxIds"));
        AddActionTypeOverride("set_pvp_zone", ("boxId", Int, null), ("arg2", Int, null), ("duration", Int, null), ("additionalEffectId", Int, null), ("arg5", Int, null), ("boxIds", IntList, null));
        AddActionNameOverride("set_quest_accept", ("questID", "questId"), ("arg1", "questId"));
        AddActionTypeOverride("set_quest_accept", ("questId", Int, null));
        AddActionNameOverride("set_quest_complete", ("questID", "questId"));
        AddActionTypeOverride("set_quest_complete", ("questId", Int, null));
        AddActionNameOverride("set_random_mesh", ("arg1", "triggerIds"), ("arg2", "visible"), ("arg3", "meshCount"), ("arg5", "delay"));
        AddActionTypeOverride("set_random_mesh", ("triggerIds", IntList, null), ("visible", Bool, null), ("meshCount", Int, null), ("arg4", Int, null), ("delay", Int, null));
        AddActionNameOverride("set_rope", ("arg1", "triggerId"), ("arg2", "visible"), ("arg3", "animationEffect"), ("arg4", "animationDelay"));
        AddActionTypeOverride("set_rope", ("triggerId", Int, null), ("visible", Bool, null), ("animationEffect", Bool, null), ("animationDelay", Int, null));
        AddActionNameOverride("set_scene_skip", ("arg1", "state"), ("arg2", "action"));
        AddActionTypeOverride("set_scene_skip", ("state", State, null));
        AddActionNameOverride("set_skill", ("objectIDs", "triggerIds"), ("arg1", "triggerIds"), ("arg2", "enable"));
        AddActionTypeOverride("set_skill", ("triggerIds", IntList, null), ("enable", Bool, null));
        AddActionNameOverride("set_skip", ("arg1", "state"));
        AddActionTypeOverride("set_skip", ("state", State, null));
        AddActionNameOverride("set_sound", ("arg1", "triggerId"), ("arg2", "enable"));
        AddActionTypeOverride("set_sound", ("triggerId", Int, null), ("enable", Bool, null));
        AddActionNameOverride("set_state", ("arg1", "id"), ("arg2", "states"), ("arg3", "randomize"));
        AddActionTypeOverride("set_state", ("id", Int, null), ("states", StateList, null), ("randomize", Bool, null));
        // AddActionNameOverride("set_time_scale");
        AddActionTypeOverride("set_time_scale", ("enable", Bool, null), ("startScale", Float, null), ("endScale", Float, null), ("duration", Float, null), ("interpolator", Int, null));
        AddActionNameOverride("set_timer", ("arg1", "timerId"), ("arg2", "seconds"), ("arg3", "startDelay"), ("arg4", "interval"), ("arg5", "vOffset"), ("arg6", "type"));
        AddActionTypeOverride("set_timer", ("seconds", Int, null), ("startDelay", Int, null), ("interval", Int, null), ("vOffset", Int, null));
        AddActionNameOverride("set_user_value", ("triggerID", "triggerId"));
        AddActionTypeOverride("set_user_value", ("triggerId", Int, null), ("value", Int, null));
        AddActionNameOverride("set_user_value_from_dungeon_reward_count", ("dungeonRewardID", "dungeonRewardId"));
        AddActionTypeOverride("set_user_value_from_dungeon_reward_count", ("dungeonRewardId", Int, null));
        AddActionNameOverride("set_user_value_from_guild_vs_game_score", ("teamID", "teamId"));
        AddActionTypeOverride("set_user_value_from_guild_vs_game_score", ("teamId", Int, null));
        AddActionNameOverride("set_user_value_from_user_count", ("triggerBoxID", "triggerBoxId"), ("userTagID", "userTagId"));
        AddActionTypeOverride("set_user_value_from_user_count", ("triggerBoxId", Int, null), ("userTagId", Int, null));
        AddActionNameOverride("set_visible_breakable_object", ("arg1", "triggerIds"), ("arg2", "visible"));
        AddActionTypeOverride("set_visible_breakable_object", ("triggerIds", IntList, null), ("visible", Bool, null));
        AddActionNameOverride("set_visible_ui", ("uiName", "uiNames"));
        AddActionTypeOverride("set_visible_ui", ("uiNames", StrList, null), ("visible", Bool, null));
        // AddActionNameOverride("shadow_expedition");
        AddActionTypeOverride("shadow_expedition", ("maxGaugePoint", Int, null));
        AddActionNameOverride("show_caption", ("offestRateX", "offsetRateX"));
        AddActionTypeOverride("show_caption", ("offsetRateX", Float, null), ("offsetRateY", Float, null), ("duration", Int, null), ("scale", Float, null));
        // AddActionNameOverride("show_count_ui");
        AddActionTypeOverride("show_count_ui", ("stage", Int, null), ("count", Int, null), ("soundType", Int, "1"));
        AddActionNameOverride("show_event_result", ("userTagID", "userTagId"), ("triggerBoxID", "triggerBoxId"), ("isOutSide", "isOutside"));
        AddActionTypeOverride("show_event_result", ("duration", Int, null), ("userTagId", Int, null), ("triggerBoxId", Int, null), ("isOutside", Bool, null));
        AddActionNameOverride("show_guide_summary", ("entityID", "entityId"), ("textID", "textId"), ("durationTime", "duration"));
        AddActionTypeOverride("show_guide_summary", ("entityId", Int, null), ("textId", Int, null), ("duration", Int, null));
        // AddActionNameOverride("show_round_ui");
        AddActionTypeOverride("show_round_ui", ("round", Int, null), ("duration", Int, null), ("isFinalRound", Bool, null));
        AddActionNameOverride("side_npc_talk", ("npcID", "npcId"));
        AddActionTypeOverride("side_npc_talk", ("npcId", Int, null), ("duration", Int, null));
        // AddActionNameOverride("sight_range");
        AddActionTypeOverride("sight_range", ("enable", Bool, null), ("range", Int, null), ("rangeZ", Int, null), ("border", Int, null));
        AddActionNameOverride("spawn_item_range", ("rangeID", "rangeIds"));
        AddActionTypeOverride("spawn_item_range", ("rangeIds", IntList, null), ("randomPickCount", Int, null));
        AddActionNameOverride("spawn_npc_range", ("rangeID", "rangeIds"));
        AddActionTypeOverride("spawn_npc_range", ("rangeIds", IntList, null), ("isAutoTargeting", Bool, null), ("randomPickCount", Int, null), ("score", Int, null));
        // AddActionNameOverride("start_combine_spawn");
        AddActionTypeOverride("start_combine_spawn", ("groupId", IntList, null), ("isStart", Bool, null));
        // AddActionNameOverride("start_mini_game");
        AddActionTypeOverride("start_mini_game", ("boxId", Int, null), ("round", Int, null), ("isShowResultUI", Bool, "True"));
        // AddActionNameOverride("start_mini_game_round");
        AddActionTypeOverride("start_mini_game_round", ("boxId", Int, null), ("round", Int, null));
        // AddActionNameOverride("start_tutorial");
        // AddActionTypeOverride("start_tutorial");
        AddActionNameOverride("talk_npc", ("spawnPointID", "spawnId"));
        AddActionTypeOverride("talk_npc", ("spawnId", Int, null));
        // AddActionNameOverride("unset_mini_game_area_for_hack");
        // AddActionTypeOverride("unset_mini_game_area_for_hack");
        // AddActionNameOverride("use_state");
        AddActionTypeOverride("use_state", ("arg1", Int, null), ("arg2", Bool, null));
        // AddActionNameOverride("user_tag_symbol");
        // AddActionTypeOverride("user_tag_symbol");
        AddActionNameOverride("user_value_to_number_mesh", ("startMeshID", "startMeshId"));
        AddActionTypeOverride("user_value_to_number_mesh", ("startMeshId", Int, null), ("digitCount", Int, null));
        // AddActionNameOverride("visible_my_pc");
        AddActionTypeOverride("visible_my_pc", ("isVisible", Bool, null));
        // AddActionNameOverride("weather");
        // AddActionTypeOverride("weather");
        // AddActionNameOverride("wedding_broken");
        // AddActionTypeOverride("wedding_broken");
        AddActionNameOverride("wedding_move_user", ("arg1", "mapId"), ("arg2", "portalIds"), ("arg3", "boxId"));
        AddActionTypeOverride("wedding_move_user", ("mapId", Int, null), ("portalIds", IntList, null), ("boxId", Int, null));
        // AddActionNameOverride("wedding_mutual_agree");
        // AddActionTypeOverride("wedding_mutual_agree");
        // AddActionNameOverride("wedding_mutual_cancel");
        // AddActionTypeOverride("wedding_mutual_cancel");
        // AddActionNameOverride("wedding_set_user_emotion");
        AddActionTypeOverride("wedding_set_user_emotion", ("id", Int, null));
        // AddActionNameOverride("wedding_set_user_look_at");
        AddActionTypeOverride("wedding_set_user_look_at", ("immediate", Bool, null));
        // AddActionNameOverride("wedding_set_user_rotation");
        AddActionTypeOverride("wedding_set_user_rotation", ("rotation", Vector3, null), ("immediate", Bool, null));
        // AddActionNameOverride("wedding_user_to_patrol");
        AddActionTypeOverride("wedding_user_to_patrol", ("patrolIndex", Int, null));
        // AddActionNameOverride("wedding_vow_complete");
        // AddActionTypeOverride("wedding_vow_complete");
        AddActionNameOverride("widget_action", ("arg1", "type"), ("arg2", "func"), ("arg3", "widgetArg"));
        AddActionTypeOverride("widget_action", ("widgetArgNum", Int, null));
        AddActionNameOverride("write_log", ("arg1", "logName"), ("arg2", "triggerId"), ("arg3", "event"), ("arg5", "subEvent"));
        AddActionTypeOverride("write_log", ("triggerId", Int, null), ("arg4", Int, null));

        // Condition Override
        // AddConditionNameOverride("all_of");
        // AddConditionTypeOverride("all_of");
        // AddConditionNameOverride("any_one");
        // AddConditionTypeOverride("any_one");
        AddConditionNameOverride("bonus_game_reward_detected", ("arg1", "boxId"));
        AddConditionTypeOverride("bonus_game_reward_detected", ("boxId", Int, null), ("arg2", Bool, null));
        AddConditionNameOverride("check_any_user_additional_effect", ("triggerBoxID", "boxId"), ("additionalEffectID", "additionalEffectId"));
        AddConditionTypeOverride("check_any_user_additional_effect", ("boxId", Int, null), ("additionalEffectId", Int, null), ("level", Int, null));
        // AddConditionNameOverride("check_dungeon_lobby_user_count");
        // AddConditionTypeOverride("check_dungeon_lobby_user_count");
        AddConditionNameOverride("check_npc_additional_effect", ("spawnPointID", "spawnId"), ("additionalEffectID", "additionalEffectId"));
        AddConditionTypeOverride("check_npc_additional_effect", ("spawnId", Int, null), ("additionalEffectId", Int, null), ("level", Int, null));
        AddConditionNameOverride("check_npc_damage", ("spawnPointID", "spawnId"));
        AddConditionTypeOverride("check_npc_damage", ("spawnId", Int, null), ("damageRate", Float, null), ("operator", Str, "GreaterEqual"));
        AddConditionNameOverride("check_npc_hp", ("spawnPointId", "spawnId"));
        AddConditionTypeOverride("check_npc_hp", ("value", Int, null), ("spawnId", Int, null), ("isRelative", Bool, null));
        AddConditionNameOverride("check_same_user_tag", ("triggerBoxID", "boxId"));
        AddConditionTypeOverride("check_same_user_tag", ("boxId", Int, null));
        // AddConditionNameOverride("check_user");
        // AddConditionTypeOverride("check_user");
        // AddConditionNameOverride("check_user_count");
        AddConditionTypeOverride("check_user_count", ("checkCount", Int, null));
        AddConditionNameOverride("count_users", ("arg1", "boxId"), ("arg2", "boxId"), ("arg3", "operator"), ("userTagID", "userTagId"));
        AddConditionTypeOverride("count_users", ("boxId", Int, null), ("arg2", Int, null), ("operator", Str, "GreaterEqual"), ("userTagId", Int, null));
        // AddConditionNameOverride("day_of_week");
        AddConditionTypeOverride("day_of_week", ("dayOfWeeks", IntList, null));
        AddConditionNameOverride("detect_liftable_object", ("triggerBoxIDs", "boxIds"), ("itemID", "itemId"));
        AddConditionTypeOverride("detect_liftable_object", ("boxIds", IntList, null), ("itemId", Int, null));
        // AddConditionNameOverride("dungeon_check_play_time");
        AddConditionTypeOverride("dungeon_check_play_time", ("playSeconds", Int, null), ("operator", Str, "GreaterEqual"));
        // AddConditionNameOverride("dungeon_check_state");
        // AddConditionTypeOverride("dungeon_check_state");
        // AddConditionNameOverride("dungeon_first_user_mission_score");
        AddConditionTypeOverride("dungeon_first_user_mission_score", ("score", Int, null), ("operator", Str, "GreaterEqual"));
        AddConditionNameOverride("dungeon_id", ("dungeonID", "dungeonId"));
        AddConditionTypeOverride("dungeon_id", ("dungeonId", Int, null));
        // AddConditionNameOverride("dungeon_level");
        AddConditionTypeOverride("dungeon_level", ("level", Int, null));
        // AddConditionNameOverride("dungeon_max_user_count");
        AddConditionTypeOverride("dungeon_max_user_count", ("value", Int, null));
        // AddConditionNameOverride("dungeon_round_require");
        AddConditionTypeOverride("dungeon_round_require", ("round", Int, null));
        // AddConditionNameOverride("dungeon_time_out");
        // AddConditionTypeOverride("dungeon_time_out");
        AddConditionNameOverride("dungeon_variable", ("varID", "varId"));
        AddConditionTypeOverride("dungeon_variable", ("varId", Int, null), ("value", Int, null));
        AddConditionNameOverride("guild_vs_game_scored_team", ("teamID", "teamId"));
        AddConditionTypeOverride("guild_vs_game_scored_team", ("teamId", Int, null));
        AddConditionNameOverride("guild_vs_game_winner_team", ("teamID", "teamId"));
        AddConditionTypeOverride("guild_vs_game_winner_team", ("teamId", Int, null));
        // AddConditionNameOverride("is_dungeon_room");
        // AddConditionTypeOverride("is_dungeon_room");
        // AddConditionNameOverride("is_playing_maple_survival");
        // AddConditionTypeOverride("is_playing_maple_survival");
        AddConditionNameOverride("monster_dead", ("arg1", "boxIds"));
        AddConditionTypeOverride("monster_dead", ("boxIds", IntList, null), ("arg2", Bool, "True"));
        AddConditionNameOverride("monster_in_combat", ("arg1", "boxIds"));
        AddConditionTypeOverride("monster_in_combat", ("boxIds", IntList, null));
        AddConditionNameOverride("npc_detected", ("arg1", "boxId"), ("arg2", "spawnIds"));
        AddConditionTypeOverride("npc_detected", ("boxId", Int, null), ("spawnIds", IntList, null));
        AddConditionNameOverride("object_interacted", ("arg1", "interactIds"), ("arg2", "stateValue"));
        AddConditionTypeOverride("object_interacted", ("interactIds", IntList, null), ("stateValue", Int, null));
        AddConditionNameOverride("pvp_zone_ended", ("arg1", "boxId"));
        AddConditionTypeOverride("pvp_zone_ended", ("boxId", Int, null));
        AddConditionNameOverride("quest_user_detected", ("arg1", "boxIds"), ("arg2", "questIds"), ("arg3", "questStates"), ("arg4", "jobCode"));
        AddConditionTypeOverride("quest_user_detected", ("boxIds", IntList, null), ("questIds", IntList, null), ("questStates", IntList, null), ("jobCode", Int, null));
        AddConditionNameOverride("random_condition", ("arg1", "rate"));
        AddConditionTypeOverride("random_condition", ("rate", Float, null));
        AddConditionNameOverride("score_board_compare", ("compareOp", "operator"));
        AddConditionTypeOverride("score_board_compare", ("operator", Str, "GreaterEqual"), ("score", Int, null));
        // AddConditionNameOverride("shadow_expedition_reach_point");
        AddConditionTypeOverride("shadow_expedition_reach_point", ("point", Int, null));
        AddConditionNameOverride("time_expired", ("arg1", "timerId"));
        // AddConditionTypeOverride("time_expired");
        // AddConditionNameOverride("true");
        AddConditionTypeOverride("true", ("arg1", Bool, null));
        AddConditionNameOverride("user_detected", ("arg1", "boxIds"), ("arg2", "jobCode"));
        AddConditionTypeOverride("user_detected", ("boxIds", IntList, null), ("jobCode", Int, null));
        // AddConditionNameOverride("user_value");
        AddConditionTypeOverride("user_value", ("value", Int, null), ("operator", Str, "GreaterEqual"));
        // AddConditionNameOverride("wait_and_reset_tick");
        AddConditionTypeOverride("wait_and_reset_tick", ("waitTick", Int, null));
        // AddConditionNameOverride("wait_seconds_user_value");
        // AddConditionTypeOverride("wait_seconds_user_value");
        AddConditionNameOverride("wait_tick", ("arg1", "waitTick"));
        AddConditionTypeOverride("wait_tick", ("waitTick", Int, null));
        // AddConditionNameOverride("wedding_entry_in_field");
        AddConditionTypeOverride("wedding_entry_in_field", ("isInField", Bool, null));
        // AddConditionNameOverride("wedding_hall_state");
        AddConditionTypeOverride("wedding_hall_state", ("success", Bool, null));
        // AddConditionNameOverride("wedding_mutual_agree_result");
        AddConditionTypeOverride("wedding_mutual_agree_result", ("success", Bool, null));
        AddConditionNameOverride("widget_condition", ("arg1", "type"), ("arg2", "name"), ("arg3", "condition"));
        // AddConditionTypeOverride("widget_condition");
    }

    private static void AddActionTypeOverride(string name, params (string, ScriptType, string?)[] overrides) {
        if (!ActionTypeOverride.TryGetValue(name, out Dictionary<string, (ScriptType, string?)>? mapping)) {
            mapping = new Dictionary<string, (ScriptType, string?)>();
            ActionTypeOverride[name] = mapping;
        }

        foreach ((string argName, ScriptType argType, string? defaultValue) in overrides) {
            Debug.Assert(!mapping.ContainsKey(argName), $"Duplicate override key: {argName} for {name}");
            mapping.Add(argName, (argType, defaultValue));
        }
    }

    private static void AddActionNameOverride(string name, params (string, string)[] overrides) {
        if (!ActionNameOverride.TryGetValue(name, out Dictionary<string, string>? mapping)) {
            mapping = new Dictionary<string, string>();
            ActionNameOverride[name] = mapping;
        }

        foreach ((string oldName, string newName) in overrides) {
            Debug.Assert(!mapping.ContainsKey(oldName), $"Duplicate override key: {oldName} for {name}");
            mapping.Add(oldName, newName);
        }
    }

    private static void AddConditionTypeOverride(string name, params (string, ScriptType, string?)[] overrides) {
        if (!ConditionTypeOverride.TryGetValue(name, out Dictionary<string, (ScriptType, string?)>? mapping)) {
            mapping = new Dictionary<string, (ScriptType, string?)>();
            ConditionTypeOverride[name] = mapping;
        }

        foreach ((string argName, ScriptType argType, string? defaultValue) in overrides) {
            Debug.Assert(!mapping.ContainsKey(argName), $"Duplicate override key: {argName} for {name}");
            mapping.Add(argName, (argType, defaultValue));
        }
    }

    private static void AddConditionNameOverride(string name, params (string, string)[] overrides) {
        if (!ConditionNameOverride.TryGetValue(name, out Dictionary<string, string>? mapping)) {
            mapping = new Dictionary<string, string>();
            ConditionNameOverride[name] = mapping;
        }

        foreach ((string oldName, string newName) in overrides) {
            Debug.Assert(!mapping.ContainsKey(oldName), $"Duplicate override key: {oldName} for {name}");
            mapping.Add(oldName, newName);
        }
    }
}
